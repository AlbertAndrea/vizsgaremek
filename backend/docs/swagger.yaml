openapi: 3.0.0
info:
  version: 1.0.0
  title: Vizsgaremek Szerver API Documentáció
  description: A Vizsgaremek végpontjainak részletes leírása és használata
servers:
  - url: http://localhost:3000
paths:
  /iskola:
    get:
      description: Returns a list of iskola
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: List of iskolas returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Iskola'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new iskola
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Iskola'
      responses:
        '201':
          description: Iskola has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iskola'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /iskola/{_id}:
    get:
      description: Get a iskola
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns a Iskola
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Iskola'
        '404':
          description: Iskola based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a iskola
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Iskola'
      responses:
        '200':
          description: Iskola has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iskola'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a Iskola
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Iskola has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Iskola based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /szekcio:
    get:
      description: Returns a list of szekcio
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: List of szekcios returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Szekcio'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new Szekcio
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Szekcio'
      responses:
        '201':
          description: Szekcio has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Szekcio'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /szekcio/{_id}:
    get:
      description: Get a szekcio
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns a Szekcio
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Szekcio'
        '404':
          description: Szekcio based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a szekcio
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Szekcio'
      responses:
        '200':
          description: Szekcio has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Szekcio'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a szekcio
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Szekcio has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Szekcio based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eloado:
    get:
      description: Returns a list of eloado
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: List of eloados returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Eloado'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new eloado
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Eloado'
      responses:
        '201':
          description: Eloado has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Eloado'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /eloado/{_id}:
    get:
      description: Get a eloado
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns a eloado
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Eloado'
        '404':
          description: Eloado based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a eloado
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Eloado'
      responses:
        '200':
          description: Eloado has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Eloado'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a eloado
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Eloado has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Eloado based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resztvevo:
    get:
      description: Returns a list of resztvevo
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: List of resztvevo returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resztvevo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new Resztvevo
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resztvevo'
      responses:
        '201':
          description: Resztvevo has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resztvevo'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /resztvevo/{_id}:
    get:
      description: Get a resztvevo
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns a Resztvevo
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Resztvevo'
        '404':
          description: Resztvevo based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a resztvevo
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resztvevo'
      responses:
        '200':
          description: Resztvevo has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resztvevo'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a resztvevo
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Resztvevo has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Resztvevo based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /szallas:
    get:
      description: Returns a list of szallas
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: List of szallas returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Szallas'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new Szallas
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Szallas'
      responses:
        '201':
          description: Szallas has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Szallas'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /szallas/{_id}:
    get:
      description: Get a szallas
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns a Szallas
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Szallas'
        '404':
          description: Szallas based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a szallas
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Szallas'
      responses:
        '200':
          description: Szallas has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Szallas'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a szallas
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Szallas has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: Szallas based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user:
    get:
      description: Returns a list of users
      security: 
        - bearerAuth: []
      responses:
        '200':
          description: List of user returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      description: Creates a new User
      security: 
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /user/{_id}:
    get:
      description: Get a user
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: Returns a User
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/User'
        '404':
          description: User based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      description: Updates a user
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User has been updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request when the post data is invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      description: Removes a user
      security: 
        - bearerAuth: []
      parameters:
        - in: path
          name: _id
          required: true
          schema: 
            type: string
      responses:
        '200':
          description: User has been deleted successfully
          content:
            application/json:
              schema:
                type: object
                example: {}
        '404':
          description: User based on id is doesn't exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Iskola:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
        address:
          type: string
    Szekcio:
      type: object
      required:
        - sectionName
        - section_leader
      properties:
        sectionName:
          type: string
        section_leader:
          type: string
    Eloado:
      type: object
      required:
        - name
        - school
        - presentationName
        - szekcio
      properties:
        name:
          type: string
        school:
          type: string
        presentationName:
          type: string
        szekcio:
        type: object
          $ref: '#/components/schemas/Szekcio'
    Resztvevo:
      type: object
      required:
        - name
        - school
        - presentation
      properties:
        name:
          type: string
        school:
          type: string
        presentation:
          type: boolean
    Szallas:
      type: object
      required:
        - name
        - address
      properties:
        name:
          type: string
        address:
          type: string
    User:
      type: object
      required:
        - email
        - lastName
        - firstName
        - role
      properties:
        email:
          type: string
        lastName:
          type: string
        firstName:
          type: string
        role:
          type: number
    Error:
      type: object
      required:
        - message
        - has_error
      properties:
        message:
          type: string
        has_error:
          type: boolean